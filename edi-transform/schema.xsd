<!-- 
  Copyright 2020 xlate.io LLC, http://www.xlate.io

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License.  You may obtain a copy
  of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
  License for the specific language governing permissions and limitations under
  the License.
 -->
<schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://xlate.io/EDISchema/v4"
	targetNamespace="http://xlate.io/EDISchema/v4" elementFormDefault="qualified">
	<!--  Simple Types  -->
	<simpleType name="nameType">
		<restriction base="ID">
			<pattern value="[A-Z][A-Z0-9]+" />
		</restriction>
	</simpleType>
	<simpleType name="useType">
		<restriction base="string">
			<enumeration value="required" />
			<enumeration value="optional" />
			<enumeration value="prohibited" />
		</restriction>
	</simpleType>
	<simpleType name="syntaxType">
		<restriction base="string">
			<enumeration value="single">
				<annotation>
					<documentation>One and only one</documentation>
				</annotation>
			</enumeration>
			<enumeration value="paired">
				<annotation>
					<documentation>All or none</documentation>
				</annotation>
			</enumeration>
			<enumeration value="required">
				<annotation>
					<documentation>One or more</documentation>
				</annotation>
			</enumeration>
			<enumeration value="exclusion">
				<annotation>
					<documentation>One or none</documentation>
				</annotation>
			</enumeration>
			<enumeration value="conditional">
				<annotation>
					<documentation>If first, then all</documentation>
				</annotation>
			</enumeration>
			<enumeration value="list">
				<annotation>
					<documentation>If first, then at least one more</documentation>
				</annotation>
			</enumeration>
			<enumeration value="firstonly">
				<annotation>
					<documentation>If first, then none of the others</documentation>
				</annotation>
			</enumeration>
		</restriction>
	</simpleType>
	<simpleType name="elementBaseType">
		<restriction base="string">
			<enumeration value="binary" />
			<enumeration value="date" />
			<enumeration value="decimal" />
			<enumeration value="identifier" />
			<enumeration value="numeric" />
			<enumeration value="string" />
			<enumeration value="time" />
		</restriction>
	</simpleType>
	<simpleType name="discriminatorType">
		<restriction base="decimal">
			<minInclusive value="1" />
			<maxInclusive value="99.99" />
			<pattern value="[0-9]+(\.[0-9]{1,2}){0,1}" />
		</restriction>
	</simpleType>
	<simpleType name="positionType">
		<restriction base="nonNegativeInteger">
			<minInclusive value="1" />
		</restriction>
	</simpleType>
	<!--  Complex Types  -->
	<complexType name="baseType" abstract="true">
		<sequence>
			<element ref="tns:description" minOccurs="0" maxOccurs="1" />
		</sequence>
		<attribute name="title" type="string" use="optional" />
	</complexType>
	<complexType name="anyElementType">
		<complexContent>
			<extension base="tns:baseType">
				<attribute name="minOccurs" type="nonNegativeInteger" default="0">
					<annotation>
						<documentation>The minimum number of times an undefined element may occur at the declared location in the
							EDI structure.</documentation>
					</annotation>
				</attribute>
				<attribute name="maxOccurs" type="nonNegativeInteger" default="1">
					<annotation>
						<documentation>The maximum number of times an undefined element may occur at the declared location in the
							EDI structure.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="controlType" abstract="true">
		<complexContent>
			<extension base="tns:baseType">
				<attribute name="header" type="NCName" use="required" />
				<attribute name="trailer" type="NCName" use="required" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="transactionControlType">
		<complexContent>
			<extension base="tns:controlType">
				<attribute name="use" type="tns:useType" default="optional" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="groupControlType">
		<complexContent>
			<extension base="tns:controlType">
				<sequence>
					<element name="transaction" type="tns:transactionControlType" minOccurs="0" />
				</sequence>
				<attribute name="use" type="tns:useType" default="optional" />
			</extension>
		</complexContent>
	</complexType>
	<attributeGroup name="referenceAttributeGroup">
		<attribute name="type" type="NCName">
			<annotation>
				<documentation> The name of the target type being referenced. </documentation>
			</annotation>
		</attribute>
		<attributeGroup ref="tns:occursAttributeGroup" />
	</attributeGroup>
	<attributeGroup name="lengthAttributeGroup">
		<attribute name="minLength" type="nonNegativeInteger" default="1">
			<annotation>
				<documentation> The minimum length allowed for an element value to be valid. </documentation>
			</annotation>
		</attribute>
		<attribute name="maxLength" type="nonNegativeInteger" default="1">
			<annotation>
				<documentation> The maximum length allowed for an element value to be valid. </documentation>
			</annotation>
		</attribute>
	</attributeGroup>
	<attributeGroup name="occursAttributeGroup">
		<attribute name="minOccurs" type="nonNegativeInteger" default="0">
			<annotation>
				<documentation> The minimum number of times a type may occur at the declared location in the EDI structure.
				</documentation>
			</annotation>
		</attribute>
		<attribute name="maxOccurs" type="nonNegativeInteger" default="1">
			<annotation>
				<documentation> The maximum number of times a type may occur at the declared location in the EDI structure.
				</documentation>
			</annotation>
		</attribute>
	</attributeGroup>
	<attributeGroup name="versionAttributeGroup">
		<attribute name="minVersion" type="token">
			<annotation>
				<documentation> The minimum transaction version this schema version applies to. </documentation>
			</annotation>
		</attribute>
		<attribute name="maxVersion" type="token">
			<annotation>
				<documentation> The maximum transaction version this schema version applies to. </documentation>
			</annotation>
		</attribute>
	</attributeGroup>
	<attributeGroup name="implementationAttributeGroup">
		<attribute name="minOccurs" type="nonNegativeInteger">
			<annotation>
				<documentation> The minimum number of times a type may occur at the declared location in the EDI structure.
				</documentation>
			</annotation>
		</attribute>
		<attribute name="maxOccurs" type="nonNegativeInteger">
			<annotation>
				<documentation> The maximum number of times a type may occur at the declared location in the EDI structure.
				</documentation>
			</annotation>
		</attribute>
	</attributeGroup>
	<!--  Element Types  -->
	<complexType name="elementStandard">
		<complexContent>
			<extension base="tns:baseType">
				<sequence>
					<element name="version" minOccurs="0" maxOccurs="unbounded">
						<complexType>
							<attributeGroup ref="tns:versionAttributeGroup" />
							<attributeGroup ref="tns:occursAttributeGroup" />
						</complexType>
					</element>
				</sequence>
				<attributeGroup ref="tns:referenceAttributeGroup" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="elementImpl">
		<complexContent>
			<extension base="tns:baseType">
				<sequence>
					<element ref="tns:enumeration" minOccurs="0" />
				</sequence>
				<attribute name="position" type="tns:positionType" use="required" />
				<attributeGroup ref="tns:implementationAttributeGroup" />
			</extension>
		</complexContent>
	</complexType>
	<!--  Composite Types  -->
	<complexType name="compositeStandard">
		<complexContent>
			<extension base="tns:baseType">
				<sequence>
					<element name="version" minOccurs="0" maxOccurs="unbounded">
						<complexType>
							<attributeGroup ref="tns:versionAttributeGroup" />
							<attributeGroup ref="tns:occursAttributeGroup" />
						</complexType>
					</element>
				</sequence>
				<attributeGroup ref="tns:referenceAttributeGroup" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="compositeImpl">
		<complexContent>
			<extension base="tns:baseType">
				<sequence>
					<element name="sequence" minOccurs="0">
						<annotation>
							<documentation> The ordered elements for a composite element implementation. </documentation>
						</annotation>
						<complexType>
							<sequence>
								<element name="element" type="tns:elementImpl" minOccurs="1" maxOccurs="unbounded" />
							</sequence>
						</complexType>
					</element>
				</sequence>
				<attribute name="position" type="tns:positionType" use="required" />
				<attributeGroup ref="tns:implementationAttributeGroup" />
			</extension>
		</complexContent>
	</complexType>
	<!--  Segment Types  -->
	<complexType name="segmentStandard">
		<complexContent>
			<extension base="tns:baseType">
				<attributeGroup ref="tns:referenceAttributeGroup" />
			</extension>
		</complexContent>
	</complexType>
	<complexType name="segmentImpl">
		<complexContent>
			<extension base="tns:baseType">
				<sequence>
					<element name="sequence" minOccurs="0">
						<annotation>
							<documentation> The ordered elements and components for a segment implementation. </documentation>
						</annotation>
						<complexType>
							<sequence>
								<choice minOccurs="0" maxOccurs="unbounded">
									<element name="element" type="tns:elementImpl" />
									<element name="composite" type="tns:compositeImpl" />
								</choice>
							</sequence>
						</complexType>
					</element>
				</sequence>
				<attribute name="type" type="NCName" use="required">
					<annotation>
						<documentation> The name of the standard segment used at this position in the implementation. Must be a
							valid segment name that occurs in the same standard loop. </documentation>
					</annotation>
				</attribute>
				<attribute name="code" type="NMTOKEN" use="optional">
					<annotation>
						<documentation> Code used to identify a segment within a loop. May be useful when occurrences of a standard
							segment contain distinct information. </documentation>
					</annotation>
				</attribute>
				<attributeGroup ref="tns:implementationAttributeGroup" />
				<attribute name="discriminator" type="tns:discriminatorType" use="optional">
					<annotation>
						<documentation> The element position in the segment used to identify an occurrence of a standard segment
							from other implementation occurrences. The element identified by the position given in this attribute must
							also specify an enumeration of values used only by this implementation and not used by any other
							implementations of the standard segment in the same implementation loop. </documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<!--  Loop Types  -->
	<complexType name="loopBase" abstract="true">
		<complexContent>
			<extension base="tns:baseType">
				<attribute name="minOccurs" type="nonNegativeInteger" default="0">
					<annotation>
						<documentation> The minimum number of times a loop may repeat. A value of 0 (zero) indicates that the loop
							is optional. When used in a loop defined within an implementation, the value may not be less than the
							value set on the standard loop referenced by the implementation loop's 'type' attribute. </documentation>
					</annotation>
				</attribute>
				<attribute name="maxOccurs" type="nonNegativeInteger" default="1">
					<annotation>
						<documentation> The maximum number of times a loop may repeat. When used in a loop defined within an
							implementation, the value may not be greater than the value set on the standard loop referenced by the
							implementation loop's 'type' attribute. </documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="loopStandard">
		<complexContent>
			<extension base="tns:loopBase">
				<sequence>
					<element name="sequence">
						<annotation>
							<documentation> The ordered list of segments and sub-loops contained in this loop. </documentation>
						</annotation>
						<complexType>
							<choice maxOccurs="unbounded">
								<element name="segment" type="tns:segmentStandard" />
								<element name="loop" type="tns:loopStandard" minOccurs="0" />
							</choice>
						</complexType>
					</element>
					<element ref="tns:syntax" minOccurs="0" maxOccurs="unbounded" />
				</sequence>
				<attribute name="code" type="NMTOKEN" use="required">
					<annotation>
						<documentation> Code used to uniquely identify a loop within the transaction/message. </documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="loopImpl">
		<complexContent>
			<extension base="tns:loopBase">
				<sequence>
					<element name="sequence">
						<annotation>
							<documentation> The ordered list of segments and sub-loops contained in this loop. </documentation>
						</annotation>
						<complexType>
							<choice maxOccurs="unbounded">
								<element name="segment" type="tns:segmentImpl" />
								<element name="loop" type="tns:loopImpl" minOccurs="0" />
							</choice>
						</complexType>
					</element>
				</sequence>
				<attribute name="type" type="NMTOKEN" use="required">
					<annotation>
						<documentation> The identifier (code attribute) of the standard loop this loop implements. </documentation>
					</annotation>
				</attribute>
				<attribute name="code" type="NMTOKEN" use="required">
					<annotation>
						<documentation> Code used to uniquely identify a loop implementation within the transaction/message
							implementation. </documentation>
					</annotation>
				</attribute>
				<attribute name="discriminator" type="tns:discriminatorType">
					<annotation>
						<documentation> The element position in the loop's first segment used to identify an implementation of a
							standard loop from other implementations. The element identified by the position given in this attribute
							must also specify an enumeration of values used only by this implementation and not used by any other
							implementations of the standard loop at the same level of the transaction. </documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<!--  Elements  -->
	<element name="schema">
		<complexType>
			<sequence>
				<element ref="tns:include" minOccurs="0" maxOccurs="unbounded">
					<annotation>
						<documentation>Optional reference to another schema file to include.</documentation>
					</annotation>
				</element>
				<choice minOccurs="0">
					<element ref="tns:interchange" />
					<sequence>
						<annotation>
							<documentation>The transaction standard and optional implementation details</documentation>
						</annotation>
						<element ref="tns:transaction" />
						<element ref="tns:implementation" minOccurs="0" />
					</sequence>
					<sequence>
						<annotation>
							<documentation> The transaction implementation details. When implementation is used without an associated
								transaction element, the transaction must have been declared in an 'include'd schema. </documentation>
						</annotation>
						<element ref="tns:implementation" />
					</sequence>
				</choice>
				<choice id="typeChoice" maxOccurs="unbounded">
					<element ref="tns:elementType" maxOccurs="unbounded" />
					<element ref="tns:compositeType" minOccurs="0" maxOccurs="unbounded" />
					<element ref="tns:segmentType" maxOccurs="unbounded" />
				</choice>
			</sequence>
		</complexType>
	</element>
	<element name="include">
		<complexType>
			<attribute name="schemaLocation" type="anyURI" use="required" />
		</complexType>
	</element>
	<element name="interchange">
		<complexType>
			<complexContent>
				<extension base="tns:controlType">
					<sequence>
						<element name="sequence">
							<complexType>
								<sequence>
									<element name="segment" type="tns:segmentStandard" minOccurs="0" maxOccurs="unbounded" />
									<element name="group" type="tns:groupControlType" minOccurs="0" />
									<element name="transaction" type="tns:transactionControlType" minOccurs="0" />
								</sequence>
							</complexType>
						</element>
						<element ref="tns:syntax" minOccurs="0" maxOccurs="unbounded" />
					</sequence>
				</extension>
			</complexContent>
		</complexType>
	</element>
	<element name="transaction">
		<complexType>
			<complexContent>
				<extension base="tns:baseType">
					<sequence>
						<element name="sequence">
							<annotation>
								<documentation> The ordered list of segments and sub-loops contained at the top-level of this
									transaction. </documentation>
							</annotation>
							<complexType>
								<choice maxOccurs="unbounded">
									<element name="segment" type="tns:segmentStandard" />
									<element name="loop" type="tns:loopStandard" minOccurs="0" />
								</choice>
							</complexType>
						</element>
						<element ref="tns:syntax" minOccurs="0" maxOccurs="unbounded" />
					</sequence>
				</extension>
			</complexContent>
		</complexType>
	</element>
	<element name="implementation">
		<complexType>
			<complexContent>
				<extension base="tns:baseType">
					<sequence>
						<element name="sequence">
							<annotation>
								<documentation> The ordered list of segments and sub-loops contained at the top-level of a transaction
									implementation. </documentation>
							</annotation>
							<complexType>
								<choice maxOccurs="unbounded">
									<element name="segment" type="tns:segmentImpl" />
									<element name="loop" type="tns:loopImpl" minOccurs="0" />
								</choice>
							</complexType>
						</element>
					</sequence>
				</extension>
			</complexContent>
		</complexType>
	</element>
	<element name="elementType">
		<complexType>
			<complexContent>
				<extension base="tns:baseType">
					<sequence>
						<element ref="tns:enumeration" minOccurs="0" />
						<element name="version" minOccurs="0" maxOccurs="unbounded">
							<complexType>
								<sequence>
									<element ref="tns:enumeration" minOccurs="0" />
								</sequence>
								<attributeGroup ref="tns:versionAttributeGroup" />
								<attributeGroup ref="tns:lengthAttributeGroup" />
							</complexType>
						</element>
					</sequence>
					<attribute name="name" type="tns:nameType" use="required">
						<annotation>
							<documentation> Code used to uniquely identify an element definition to be referenced by compositeType and
								segmentType elements within this schema. This value will be returned by an EDIStreamReader's
								`getReferenceCode` method when no `code` attribute has been specified. </documentation>
						</annotation>
					</attribute>
					<attribute name="code" type="NMTOKEN" use="optional">
						<annotation>
							<documentation> Code used to identify an element externally. This value will be returned by an
								EDIStreamReader's `getReferenceCode` method. </documentation>
						</annotation>
					</attribute>
					<attribute name="number">
						<annotation>
							<documentation>*DEPRECATED* Use the `code` attribute to provide an element reference number.
							</documentation>
						</annotation>
						<simpleType>
							<restriction base="nonNegativeInteger">
								<minInclusive value="1" />
								<maxInclusive value="9999" />
							</restriction>
						</simpleType>
					</attribute>
					<attribute name="base" type="tns:elementBaseType" use="optional" default="string">
						<annotation>
							<documentation> Identifies the element data type </documentation>
						</annotation>
					</attribute>
					<attributeGroup ref="tns:lengthAttributeGroup" />
				</extension>
			</complexContent>
		</complexType>
	</element>
	<element name="description" type="string" />
	<element name="enumeration">
		<complexType>
			<sequence>
				<element name="value" maxOccurs="unbounded">
					<complexType>
						<simpleContent>
							<extension base="token">
								<attribute name="title" type="string" />
							</extension>
						</simpleContent>
					</complexType>
				</element>
			</sequence>
		</complexType>
	</element>
	<element name="compositeType">
		<complexType>
			<complexContent>
				<extension base="tns:baseType">
					<sequence>
						<element name="sequence">
							<annotation>
								<documentation> The ordered elements and syntax restrictions for a composite element. </documentation>
							</annotation>
							<complexType>
								<choice minOccurs="1" maxOccurs="unbounded">
									<element name="element" type="tns:elementStandard" minOccurs="1" maxOccurs="unbounded" />
									<element name="any" type="tns:anyElementType">
										<annotation>
											<documentation> May be used to declare that any component element may occur in this composite type
												up to the maximum number given by maxOccurs. The value of minOccurs defines the number of
												undefined component elements that MUST occur in the composite. </documentation>
										</annotation>
									</element>
								</choice>
							</complexType>
						</element>
						<element ref="tns:syntax" minOccurs="0" maxOccurs="unbounded" />
					</sequence>
					<attribute name="name" type="tns:nameType" use="required">
						<annotation>
							<documentation> Code used to uniquely identify a composite element definition to be referenced by
								segmentType elements within this schema. This value will be returned by an EDIStreamReader's
								`getReferenceCode` method. </documentation>
						</annotation>
					</attribute>
				</extension>
			</complexContent>
		</complexType>
	</element>
	<element name="segmentType">
		<annotation>
			<documentation>Used to declare a segment</documentation>
		</annotation>
		<complexType>
			<complexContent>
				<extension base="tns:baseType">
					<sequence>
						<element name="sequence" minOccurs="0">
							<annotation>
								<documentation> The ordered elements, components, and syntax restrictions for a segment.
								</documentation>
							</annotation>
							<complexType>
								<choice minOccurs="0" maxOccurs="unbounded">
									<element name="element" type="tns:elementStandard">
										<annotation>
											<documentation> Defines a reference to a standard element definition. </documentation>
										</annotation>
									</element>
									<element name="composite" type="tns:compositeStandard" />
									<element name="any" type="tns:anyElementType">
										<annotation>
											<documentation> May be used to declare that any element or composite may occur in this segment
												type up to the maximum number given by maxOccurs. The value of minOccurs defines the number of
												undefined elements that MUST occur in the segment at this position. Elements that repeat may
												occur up to 99 times and are not affected by the value of the maxOccurs attribute.
											</documentation>
										</annotation>
									</element>
								</choice>
							</complexType>
						</element>
						<element ref="tns:syntax" minOccurs="0" maxOccurs="unbounded" />
					</sequence>
					<attribute name="name" use="required">
						<annotation>
							<documentation> Name of the segment. Also referred to as the segment's tag. This is the two or three
								character string used to identify a segment. </documentation>
						</annotation>
						<simpleType>
							<restriction base="tns:nameType">
								<maxLength value="3" />
							</restriction>
						</simpleType>
					</attribute>
				</extension>
			</complexContent>
		</complexType>
	</element>
	<element name="syntax">
		<complexType>
			<sequence>
				<element name="position" type="tns:positionType" maxOccurs="unbounded" />
			</sequence>
			<attribute name="type" type="tns:syntaxType" />
		</complexType>
	</element>
</schema>
